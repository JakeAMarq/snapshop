<<<<<<< .mine
// TCSS 305 - Autumn 2018
// Assignment 4 - SnapShopGUI
||||||| .r26
=======
/*
 * TCSS 305
 * Assignment 4 - SnapShop
 */
>>>>>>> .r28

package gui;

<<<<<<< .mine
||||||| .r26
=======
import filters.AbstractFilter;
import filters.EdgeDetectFilter;
import filters.EdgeHighlightFilter;
import filters.FlipHorizontalFilter;
import filters.FlipVerticalFilter;
import filters.GrayscaleFilter;
import filters.SharpenFilter;
import filters.SoftenFilter;
import image.PixelImage;
>>>>>>> .r28
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import filters.AbstractFilter;
import filters.EdgeDetectFilter;
import filters.EdgeHighlightFilter;
import filters.Filter;
import filters.FlipHorizontalFilter;
import filters.FlipVerticalFilter;
import filters.GrayscaleFilter;
import filters.SharpenFilter;
import filters.SoftenFilter;
import image.PixelImage;

/**
 * 
 * @author Bayley Cope
 * @version November 1 2018
 */
public class SnapShopGUI extends JFrame implements ActionListener {
    
    /** Serial version UID. */
    private static final long serialVersionUID = 0;
    
<<<<<<< .mine
    // Capture screen dimensions
    
    /** A toolkit. */
    private static final Toolkit KIT = Toolkit.getDefaultToolkit();
    
    /** Dimension of the screen. */
    private static final Dimension SCREEN_SIZE = KIT.getScreenSize();
    
    // The button text
||||||| .r26
=======
    /**
     * Index of Edge Detect button/filter.
     */
    private static final int EDGE_DETECT_INDEX = 0;
>>>>>>> .r28
    
<<<<<<< .mine
    /** Edge detect. */
    private static final String EDGE_DETECT = "Edge Detect";
    
    /** Edge highlight. */
    private static final String EDGE_HIGHLIGHT = "Edge Highlight";
    
    /** Flip horizontal. */
    private static final String FLIP_HORIZONTAL = "Flip Horizontal";
    
    /** Flip vertical. */
    private static final String FLIP_VERTICAL = "Flip Vertical";
||||||| .r26
=======
    /**
     * The text of the Edge Highlight button.
     */
    private static final String EDGE_HIGHLIGHT_BUTTON_TEXT = "Edge Highlight";
>>>>>>> .r28
    
<<<<<<< .mine
    /** Grayscale. */
    private static final String GRAYSCALE = "Grayscale";
||||||| .r26
=======
    /**
     * Index of Edge Highlight button/filter.
     */
    private static final int EDGE_HIGHLIGHT_INDEX = 1;
>>>>>>> .r28
    
<<<<<<< .mine
    /** Sharpen. */
    private static final String SHARPEN = "Sharpen";
||||||| .r26
=======
    /**
     * The text of the Flip Horizontal button.
     */
    private static final String FLIP_HORIZONTAL_BUTTON_TEXT = "Flip Horizontal";
>>>>>>> .r28
    
<<<<<<< .mine
    /** Soften. */
    private static final String SOFTEN = "Soften";

    /** Open. */
    private static final String OPEN = "Open...";
||||||| .r26
=======
    /**
     * Index of Flip Horizontal button/filter.
     */
    private static final int FLIP_HORIZONTAL_INDEX = 2;
>>>>>>> .r28
    
<<<<<<< .mine
    /** Save as. */
    private static final String SAVE_AS = "Save As...";
||||||| .r26
=======
    /**
     * The text of the Flip Vertical button.
     */
    private static final String FLIP_VERTICAL_BUTTON_TEXT = "Flip Vertical";
>>>>>>> .r28
    
<<<<<<< .mine
    /** Close image. */
    private static final String CLOSE_IMAGE = "Close Image";
||||||| .r26
=======
    /**
     * Index of Flip Vertical button/filter.
     */
    private static final int FLIP_VERTICAL_INDEX = 3;
>>>>>>> .r28
    
<<<<<<< .mine
    // Errors
||||||| .r26
=======
    /**
     * The text of the Grayscale button.
     */
    private static final String GRAYSCALE_BUTTON_TEXT = "Grayscale";
>>>>>>> .r28
    
<<<<<<< .mine
    /** Error Message. */
    private static final String ERROR_MESSAGE = "The selected file did not contain an image!";
||||||| .r26
=======
    /**
     * Index of Grayscale button/filter.
     */
    private static final int GRAYSCALE_INDEX = 4;
>>>>>>> .r28
    
<<<<<<< .mine
    /** Error Title. */
    private static final String ERROR_TITLE = "Error!";
||||||| .r26
=======
    /**
     * The text of the Sharpen button.
     */
    private static final String SHARPEN_BUTTON_TEXT = "Sharpen";
>>>>>>> .r28
    
<<<<<<< .mine
    // Filter Objects
||||||| .r26
=======
    /**
     * Index of Sharpen button/filter.
     */
    private static final int SHARPEN_INDEX = 5;
>>>>>>> .r28
    
<<<<<<< .mine
    /** Edge Detect. */
    private EdgeDetectFilter myEdgeDetectFilter;
||||||| .r26
=======
    /**
     * The text of the Soften button.
     */
    private static final String SOFTEN_BUTTON_TEXT = "Soften";
>>>>>>> .r28
    
<<<<<<< .mine
    /** Edge Highlight. */
    private EdgeHighlightFilter myEdgeHighlightFilter;
||||||| .r26
=======
    /**
     * Index of Soften button/filter.
     */
    private static final int SOFTEN_INDEX = 6;
>>>>>>> .r28
    
<<<<<<< .mine
    /** Flip Horizontal. */
    private FlipHorizontalFilter myFlipHorizontalFilter;
||||||| .r26
=======
    /**
     * The text of the Open button.
     */
    private static final String OPEN_BUTTON_TEXT = "Open...";
>>>>>>> .r28
    
<<<<<<< .mine
    /** Flip Vertical. */
    private FlipVerticalFilter myFlipVerticalFilter;
||||||| .r26
=======
    /**
     * Index of Open button.
     */
    private static final int OPEN_INDEX = 7;
>>>>>>> .r28
    
<<<<<<< .mine
    /** GrayScale. */
    private GrayscaleFilter myGrayscaleFilter;
||||||| .r26
=======
    /**
     * The text of the Save As button.
     */
    private static final String SAVE_AS_BUTTON_TEXT = "Save as...";
>>>>>>> .r28
    
<<<<<<< .mine
    /** Sharpen. */
    private SharpenFilter mySharpenFilter;
||||||| .r26
=======
    /**
     * The text of the Close Image button.
     */
    private static final String CLOSE_IMAGE_BUTTON_TEXT = "Close Image";
>>>>>>> .r28
    
<<<<<<< .mine
    /** Soften. */
    private SoftenFilter mySoftenFilter;
||||||| .r26
=======
    /**
     * Index of Close Image button.
     */
    private static final int CLOSE_IMAGE_INDEX = 9;
>>>>>>> .r28
    
<<<<<<< .mine
    // Other
||||||| .r26
=======
    /**
     * The error message thrown when an invalid file is chosen.
     */
    private static final String ERROR_MESSAGE = "The selected file did not contain an image!";
>>>>>>> .r28
    
<<<<<<< .mine
    /** File Chooser. */
    private JFileChooser myChooser = new JFileChooser();

    /** The Picture. */
    private PixelImage myPic;
||||||| .r26
=======
    /**
     * Title of error message thrown when an invalid file is chosen.
     */
    private static final String ERROR_TITLE = "Error!";
>>>>>>> .r28
    
<<<<<<< .mine
    /** JLabel. */
    private JLabel myLabel = new JLabel();
||||||| .r26
=======
    /**
     * ArrayList containing all the buttons of the GUI.
     */
    private final ArrayList<JButton> myButtonArray;
>>>>>>> .r28
    
<<<<<<< .mine
    // Arrays
||||||| .r26
=======
    /**
     * ArrayList containing all the filters used in the program.
     */
    private final ArrayList<AbstractFilter> myFilterArray;
>>>>>>> .r28
    
<<<<<<< .mine
    /** Number of filter buttons. */
    private final int myNumberOfFilterButtons = 7;
||||||| .r26
=======
    /**
     * The file chooser used to open and save files.
     */
    private final JFileChooser myFileChooser;
>>>>>>> .r28
    
<<<<<<< .mine
    /** Array of filter buttons. */
    private final JButton[] myFilterButtons = new JButton[myNumberOfFilterButtons];
    
||||||| .r26
=======
    /**
     * The frame which the whole GUI is placed in.
     */
    private final JFrame myFrame;
            
>>>>>>> .r28
    /** Number of option buttons. */
    private final int myNumberOfOptionButtons = 3;
    
<<<<<<< .mine
    /** Array of option buttons. */
    private final JButton[] myOptionButtons = new JButton[myNumberOfOptionButtons];

    /** Size of the panel. */
    private Dimension mySize;
||||||| .r26
=======
    /**
     * JLabel used to display image.
     */
    private final JLabel myLabel;
       
    /**
     * Constructor for GUI.
     */
    public SnapShopGUI() {
        myFrame = new JFrame();
        myFileChooser = new JFileChooser();
        myFileChooser.setCurrentDirectory(new File("."));
        myLabel = new JLabel();
        myLabel.setHorizontalAlignment(JLabel.CENTER);
        myButtonArray = new ArrayList<JButton>();
        myFilterArray = new ArrayList<AbstractFilter>();
        constructButtonsAndFilters();      
    }
>>>>>>> .r28
    
<<<<<<< .mine
    /** Constructs a new SnapShopGUI. */
    public void start() {
        initialize();
        setVisible(true);
    }
    
    /** Sets up the GUI. */
    private void initialize() {
        this.setTitle("TCSS 305 - Assignment 4");
        myEdgeDetectFilter = new EdgeDetectFilter();
        // North Panel
        northPanelButtons();
        
        // South Panel
        southPanelButtons();
        
        // Center Panel
        final JPanel center = new JPanel();
        center.add(myLabel);
        add(center, BorderLayout.CENTER);
        
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(true);
        pack();
        mySize = getSize();
        setLocation(SCREEN_SIZE.width / 2 - getWidth() / 2,
                    SCREEN_SIZE.height / 2 - getHeight() / 2);
||||||| .r26
=======
    /**
     * Constructs the buttons and filters.
     */
    private void constructButtonsAndFilters() {
        myButtonArray.add(new JButton(EDGE_DETECT_BUTTON_TEXT));
        myButtonArray.add(new JButton(EDGE_HIGHLIGHT_BUTTON_TEXT));
        myButtonArray.add(new JButton(FLIP_HORIZONTAL_BUTTON_TEXT));
        myButtonArray.add(new JButton(FLIP_VERTICAL_BUTTON_TEXT));
        myButtonArray.add(new JButton(GRAYSCALE_BUTTON_TEXT));
        myButtonArray.add(new JButton(SHARPEN_BUTTON_TEXT));
        myButtonArray.add(new JButton(SOFTEN_BUTTON_TEXT));
        myButtonArray.add(new JButton(OPEN_BUTTON_TEXT));
        myButtonArray.add(new JButton(SAVE_AS_BUTTON_TEXT));
        myButtonArray.add(new JButton(CLOSE_IMAGE_BUTTON_TEXT));
        setButtonListeners();
        setButtonsEnabled(false); 
        myButtonArray.get(OPEN_INDEX).setEnabled(true);
        myFilterArray.add(new EdgeDetectFilter());
        myFilterArray.add(new EdgeHighlightFilter());
        myFilterArray.add(new FlipHorizontalFilter());
        myFilterArray.add(new FlipVerticalFilter());
        myFilterArray.add(new GrayscaleFilter());
        myFilterArray.add(new SharpenFilter());
        myFilterArray.add(new SoftenFilter());
>>>>>>> .r28
    }
    
    /**
     * A method called in response to action events.
     * 
     * @param theEvent the action that triggered the call
     */
<<<<<<< .mine
    @Override
    public void actionPerformed(final ActionEvent theEvent) {
        System.out.print("test");
        final String command = theEvent.getActionCommand();
        if (command.equals(OPEN)) {
            chooseFile();
        } else if (command.equals(SAVE_AS)) {
            saveFile();
        } else if (command.equals(CLOSE_IMAGE)) {
            setMinimumSize(null);
            myLabel.setIcon(null);
            pack();
            for (int i = 0; i < myOptionButtons.length; i++) {
                if (i != 0) {
                    myOptionButtons[i].setEnabled(false);
                }
            }
            for (int i = 0; i < myFilterButtons.length; i++) {
                myFilterButtons[i].setEnabled(false);
            }
        }
||||||| .r26
=======
    private void setButtonListeners() {
        for (JButton button : myButtonArray) {
            button.addActionListener(this);
        }
>>>>>>> .r28
    }
    
    /**
     * A method called for filter action events.
     * 
     * @param theEvent the action that triggered the call
     */
<<<<<<< .mine
    public void filterAction(final ActionEvent theEvent) {
        final String command = theEvent.getActionCommand();
        if (command.equals(EDGE_DETECT)) {
            myEdgeDetectFilter.filter(myPic);
            myLabel.setIcon(new ImageIcon(myPic));
        } else if (command.equals(EDGE_HIGHLIGHT)) {
            myEdgeHighlightFilter.filter(myPic);
            myLabel.setIcon(new ImageIcon(myPic));
        } else if (command.equals(FLIP_HORIZONTAL)) {
            myFlipHorizontalFilter.filter(myPic);
            myLabel.setIcon(new ImageIcon(myPic));
        } else if (command.equals(FLIP_VERTICAL)) {
            myFlipVerticalFilter.filter(myPic);
            myLabel.setIcon(new ImageIcon(myPic));
        } else if (command.equals(GRAYSCALE)) {
            myGrayscaleFilter.filter(myPic);
            myLabel.setIcon(new ImageIcon(myPic));
        } else if (command.equals(SHARPEN)) {
            mySharpenFilter.filter(myPic);
            myLabel.setIcon(new ImageIcon(myPic));
        } else if (command.equals(SOFTEN)) {
            mySoftenFilter.filter(myPic);
            myLabel.setIcon(new ImageIcon(myPic));
        }
||||||| .r26
=======
    private void setButtonsEnabled(final boolean theEnabled) {
        for (int i = EDGE_DETECT_INDEX; i <= CLOSE_IMAGE_INDEX; i++) {
            if (i != OPEN_INDEX) {
                myButtonArray.get(i).setEnabled(theEnabled);
            }
        }
>>>>>>> .r28
    }
    
<<<<<<< .mine
    /** The northPanel, containing all of the filter buttons. */
    public void northPanelButtons() {
        final String[] filters = {EDGE_DETECT, EDGE_HIGHLIGHT, FLIP_HORIZONTAL,
                                  FLIP_VERTICAL, GRAYSCALE, SHARPEN, SOFTEN};
        final JPanel n = new JPanel();
        for (int i = 0; i < myFilterButtons.length; i++) {
            myFilterButtons[i] = new JButton(filters[i]);
            myFilterButtons[i].addActionListener(this);
            myFilterButtons[i].setEnabled(false);
            n.add(myFilterButtons[i]);
            
        }
        add(n, BorderLayout.NORTH);
        n.setVisible(true);
||||||| .r26
=======
    /**
     * Creates the GUI and makes it visible to the user.
     */
    public void start() {
        myFrame.setTitle("SnapShop");
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        myFrame.setLayout(new BorderLayout());
        myFrame.add(makeNorthButtons(), BorderLayout.NORTH);
        myFrame.add(myLabel, BorderLayout.CENTER);
        myFrame.add(makeSouthButtons(), BorderLayout.SOUTH);
        myFrame.pack();
        myFrame.setMinimumSize(myFrame.getSize());
        myFrame.setVisible(true);
>>>>>>> .r28
    }
    
<<<<<<< .mine
    /** The southPanel, containing all of the option buttons. */
    public void southPanelButtons() {
        final String[] options = {OPEN, SAVE_AS, CLOSE_IMAGE};
        final JPanel s = new JPanel();
        for (int i = 0; i < myOptionButtons.length; i++) {
            myOptionButtons[i] = new JButton(options[i]);
            myOptionButtons[i].addActionListener(this);
            if (i != 0) {
                myOptionButtons[i].setEnabled(false);
            }
            s.add(myOptionButtons[i]);
        }
        add(s, BorderLayout.SOUTH);
        s.setVisible(true);
||||||| .r26
=======
    /**
     * Returns a JPanel containing the top buttons.
     * 
     * @return a JPanel containing the top buttons
     */
    private JPanel makeNorthButtons() {
        final JPanel northButtons = new JPanel(new FlowLayout());
        for (int i = EDGE_DETECT_INDEX; i <= SOFTEN_INDEX; i++) {
            northButtons.add(myButtonArray.get(i));
        }
        return northButtons;
>>>>>>> .r28
    }
    
<<<<<<< .mine
    /** A method that is called to open a file for the GUI. */
    public void chooseFile() {
        final int file = myChooser.showOpenDialog(null);
        if (file == JFileChooser.APPROVE_OPTION) {
            try {
                myPic = PixelImage.load(myChooser.getSelectedFile());
                myLabel.setIcon(new ImageIcon(myPic));
                for (int i = 0; i < myOptionButtons.length; i++) {
                    myOptionButtons[i].setEnabled(true);
||||||| .r26
=======
    /**
     * Returns a JPanel containing the bottom buttons.
     * 
     * @return a JPanel containing the bottom buttons
     */
    private JPanel makeSouthButtons() {
        final JPanel southButtons = new JPanel(new FlowLayout());
        for (int i = OPEN_INDEX; i <= CLOSE_IMAGE_INDEX; i++) {
            southButtons.add(myButtonArray.get(i));
        }
        return southButtons;
    }

    /**
     * Method that gets called when a button is pressed and carries and
     * out action of that button.
     * 
     * I chose to ignore the warned of my cyclomatic complexity being too
     * high in this method because the method is clear and manageable.
     * 
     * @param theEvent the button being pressed
     */
    @Override
    public void actionPerformed(final ActionEvent theEvent) {
        final int result;
        switch (theEvent.getActionCommand()) {
            case OPEN_BUTTON_TEXT:
                result = myFileChooser.showOpenDialog(myLabel);
                if (result == JFileChooser.APPROVE_OPTION) {
                    try {
                        myPic = PixelImage.load(myFileChooser.getSelectedFile());
                        myLabel.setIcon(new ImageIcon(myPic));       
                        setButtonsEnabled(true);
                    } catch (final IOException e) {
                        JOptionPane.showMessageDialog(null, 
                                                      ERROR_MESSAGE, 
                                                      ERROR_TITLE, 
                                                      JOptionPane.INFORMATION_MESSAGE);
                    }
>>>>>>> .r28
                }
<<<<<<< .mine
                for (int i = 0; i < myFilterButtons.length; i++) {
                    myFilterButtons[i].setEnabled(true);
||||||| .r26
=======
                break;
            case SAVE_AS_BUTTON_TEXT:
                result = myFileChooser.showOpenDialog(myLabel);
                if (result == JFileChooser.APPROVE_OPTION) {
                    try {
                        myPic.save(myFileChooser.getSelectedFile());
                    } catch (final IOException e) { }
>>>>>>> .r28
                }
<<<<<<< .mine
                setMinimumSize(mySize);
                pack();
                setMinimumSize(getSize());
                pack();
                setLocation(SCREEN_SIZE.width / 2 - getWidth() / 2,
                            SCREEN_SIZE.height / 2 - getHeight() / 2);
            } catch (final IOException e) {
                JOptionPane.showMessageDialog(null,
                                            ERROR_MESSAGE,
                                            ERROR_TITLE,
                                            JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    /** A method that is called to save the file. */
    public void saveFile() {
        final int file = myChooser.showSaveDialog(null);
        if (file == JFileChooser.APPROVE_OPTION) {
            try {
                myPic.save(myChooser.getSelectedFile());
            } catch (final IOException e) {
                JOptionPane.showMessageDialog(null,
                                              "Could not save the selected file!",
                                              ERROR_TITLE,
                                              JOptionPane.ERROR_MESSAGE);
            }
||||||| .r26
=======
                break;
            case CLOSE_IMAGE_BUTTON_TEXT:
                myLabel.setIcon(null);
                setButtonsEnabled(false);
                myFrame.setMinimumSize(null);
                break;
            case EDGE_DETECT_BUTTON_TEXT:
                myFilterArray.get(EDGE_DETECT_INDEX).filter(myPic);
                myLabel.setIcon(new ImageIcon(myPic));
                break;
            case EDGE_HIGHLIGHT_BUTTON_TEXT:
                myFilterArray.get(EDGE_HIGHLIGHT_INDEX).filter(myPic);
                myLabel.setIcon(new ImageIcon(myPic));
                break;
            case FLIP_HORIZONTAL_BUTTON_TEXT:
                myFilterArray.get(FLIP_HORIZONTAL_INDEX).filter(myPic);
                myLabel.setIcon(new ImageIcon(myPic));
                break;
            case FLIP_VERTICAL_BUTTON_TEXT:
                myFilterArray.get(FLIP_VERTICAL_INDEX).filter(myPic);
                myLabel.setIcon(new ImageIcon(myPic));
                break;
            case GRAYSCALE_BUTTON_TEXT:
                myFilterArray.get(GRAYSCALE_INDEX).filter(myPic);
                myLabel.setIcon(new ImageIcon(myPic));
                break;
            case SHARPEN_BUTTON_TEXT:
                myFilterArray.get(SHARPEN_INDEX).filter(myPic);
                myLabel.setIcon(new ImageIcon(myPic));
                break;
            case SOFTEN_BUTTON_TEXT:
                myFilterArray.get(SOFTEN_INDEX).filter(myPic);
                myLabel.setIcon(new ImageIcon(myPic));
                break;
            default:
                break;
>>>>>>> .r28
        }
    }
}
